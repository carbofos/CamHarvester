cmake_minimum_required(VERSION 2.8.12)
cmake_policy(SET CMP0037 NEW)
project(CamProxy)
set(Boost_ADDITIONAL_VERSIONS "1.XX" "1.XX.0")

set(CMAKE_CXX_FLAGS "-Wall -Wextra")
set(CMAKE_CXX_STANDARD 17)

# SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg")
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} -g -fsanitize=leak -fsanitize=address")
set(CMAKE_CXX_FLAGS_RELEASE "-O3")
# SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -pg")
# SET(CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} -pg")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")
file(GLOB SOURCES  ${PROJECT_SOURCE_DIR}/src/*.cpp )
message(STATUS Mainsources: ${SOURCES})
#set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")
include_directories( ${Boost_INCLUDE_DIR}  third-party )
find_package( Boost 1.40 REQUIRED COMPONENTS program_options unit_test_framework log)
ADD_DEFINITIONS(-DBOOST_LOG_DYN_LINK)
include_directories( ${Boost_INCLUDE_DIR} )
#include_directories(main PUBLIC ${PROJECT_SOURCE_DIR}/src)
link_libraries( ${MYSQL_LIBRARY} ${Boost_LIBRARIES} pthread stdc++fs )
#add_executable(CamProxy ${PROJECT_SOURCE_DIR}/src/CamProxy.cxx ${SOURCES})

ADD_DEFINITIONS(-DBOOST_TEST_DYN_LINK) 
#add_executable(test ${PROJECT_SOURCE_DIR}/src/test.cxx ${SOURCES})
add_executable(CamHarvester ${PROJECT_SOURCE_DIR}/src/CamHarvester.cxx ${SOURCES})
